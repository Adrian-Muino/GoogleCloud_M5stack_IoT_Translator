######### Imports #########

from m5stack import *
from m5stack_ui import *
from uiflow import *
from m5stack import mic
import urequests
import base64
import re
import wifiCfg
import time
import machine

################################################ WIFI settings ################################################

#wifiCfg.doConnect('SSID', 'PSW') #UPDATE SSID & PSW  with your wifi credentials
#while not (wifiCfg.wlan_sta.isconnected()):
#  wait(1)
#  print('Waiting connect')
#print('Connected')

################################################ INIT & Global variables ################################################

######### Init #########

screen = M5Screen()
screen.clean_screen()
screen.set_screen_bg_color(0xf0fcff)
rgb.setColorAll(0x33ff33) #lateral light



######### Init the translate UI #########

record_button = M5Btn(text='Record', x=0, y=100, w=80, h=140, bg_c=0x601a1a, text_c=0xffffff, font=FONT_MONT_18, parent=None)
repeat_button = M5Btn(text='Repeat', x=88, y=132, w=200, h=50, bg_c=0xd2ab6f, text_c=0x000000, font=FONT_MONT_18, parent=None)
translate_button = M5Btn(text='Translate', x=88, y=190, w=210, h=50, bg_c=0x3f804e, text_c=0xffffff, font=FONT_MONT_22, parent=None)

change_languages_button = M5Btn(text='Languages', x=88, y=30, w=210, h=50, bg_c=0x3f804e, text_c=0xffffff, font=FONT_MONT_22, parent=None)

transcribed_output = M5Label('transcribed_text', x=5, y=20, color=0x000, font=FONT_MONT_10, parent=None)
translated_output = M5Label('translated_text', x=5, y=40, color=0x000, font=FONT_MONT_10, parent=None)
say_translated_text_output = M5Label('say_translated_text_output', x=5, y=60, color=0x000, font=FONT_MONT_10, parent=None)

mycrophone_icon = M5Img("res/mycrophone_icon_100x100.png", x=110, y=124, parent=None)
recording_icon = M5Img("res/recording_icon_100x100.png", x=109, y=17, parent=None)
mycrophone_icon.set_hidden(True)
recording_icon.set_hidden(True)

hide_main_screen()
show_language_screen()


######### Main Screen Global variables #########
transcribed_text = None
translated_text = None

language_input_ui = 'en'
language_output_ui = 'fr'



################################################ Interfaces ################################################

######### Main Screen Interface #########
def show_main_screen():

    ######### Screen settings #########
    global screen, record_button, repeat_button, translate_button, transcribed_output, translated_output, say_translated_text_output
    rgb.setColorAll(0x33ff33)
    
    ######### Buttons & labels in the screen #########
    record_button.set_hidden(False)
    repeat_button.set_hidden(False)
    translate_button.set_hidden(False)

    transcribed_output.set_hidden(False)
    translated_output.set_hidden(False)
    say_translated_text_output.set_hidden(False)


def hide_main_screen():

    ######### Screen settings #########
    global screen, record_button, repeat_button, translate_button, transcribed_output, translated_output, say_translated_text_output

    ######### Buttons & labels in the screen #########
    record_button.set_hidden(True)
    repeat_button.set_hidden(True)
    translate_button.set_hidden(True)
    
    change_languages_button.set_hidden(True)

    transcribed_output.set_hidden(True)
    translated_output.set_hidden(True)
    say_translated_text_output.set_hidden(True)


################################################ METHODS ################################################

######### Record button pressed method #########

def change_languages_button_pressed():
    show_language_screen()

change_languages_button.pressed(change_languages_button_pressed)


def record_button_pressed():
    rgb.setColorAll(0x0064b0)
    hide_main_screen()
    show_img_record()
    machine.Timer(-1).init(period=1000, mode=machine.Timer.ONE_SHOT, callback=record)

record_button.pressed(record_button_pressed)


def show_img_record():
    mycrophone_icon.set_hidden(False)
    recording_icon.set_hidden(False)


def hide_img_record():
    mycrophone_icon.set_hidden(True)
    recording_icon.set_hidden(True)


def record(timer):
    try:
        mic.record2file(5, '/flash/sound1.wav')
    except Exception as e:
        print(e)
    finally:
        hide_img_record()
        show_main_screen()


######### Repeat button pressed method #########

def repeat_button_pressed():
  rgb.setColorAll(0x0064b0)
  speaker.playWAV('/flash/sound2.wav', volume=6)
  rgb.setColorAll(0x33ff33)

repeat_button.pressed(repeat_button_pressed)

######### Translate button pressed method #########

def translate_button_pressed():
  rgb.setColorAll(0x0064b0)
  transcribe_wav()
  assign_result_to_transcribed_text()
  rgb.setColorAll(0x010d41)
  translate_text()
  assign_result_to_translated_text()
  rgb.setColorAll(0x0064b0)
  say_translated_text()
  rgb.setColorAll(0x33ff33)
  
translate_button.pressed(translate_button_pressed) 

######### Transcribe method using Cloud #########

def transcribe_wav():
    # Set the API key and language code

    api_key = 'AIzaSyBQXF-YzRFaUFfpOAA7bznV0z4ncw1jpn0'
    
    global language_input_ui
    language_code = language_input_ui

    # Set the URL of the Speech-to-Text API endpoint  
    url = 'https://speech.googleapis.com/v1/speech:recognize?key=' + api_key

    # Read the content of the WAV file
    with open('/flash/sound1.wav', 'rb') as f:
        content = f.read()

    # Encode the content as base64
    audio_content = base64.b64encode(content).decode('utf-8')

    # Set the request headers
    headers = {'Content-Type': 'application/json'}

    # Set the request data
    data = {
    'config': {
        'language_code': language_code
    },
    'audio': {
        'content': audio_content
    }
    }

    try:
        response = urequests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            transcription = response.json()['results'][0]['alternatives'][0]['transcript']
            global transcribed_text
            transcribed_text = html_unescape(transcription)
        else:
            global transcribed_text
            transcribed_text = "Error in transcribed method"
    except Exception as e:
        transcription_output.set_text(str(e))

######### Translate method using Cloud #########

def translate_text():
  api_key = 'AIzaSyBQXF-YzRFaUFfpOAA7bznV0z4ncw1jpn0'
  # Set the URL of the Cloud Function endpoint
  url = 'https://translation.googleapis.com/language/translate/v2?key=' + api_key

  # Set the input and output languages
  global language_input_ui
  language_input = language_input_ui
  global language_output_ui
  language_output = language_output_ui

  # Set the request data
  global transcribed_text
  data = {'q': [transcribed_text], 'source': language_input, 'target': language_output}

  # Set the request headers
  headers = {'Content-Type': 'application/json'}

  try:
    response = urequests.post(url, headers=headers, json=data)
    if response.status_code == 200:
      translation = response.json()['data']['translations'][0]['translatedText']
      global translated_text
      translated_text = html_unescape(translation)
    else:
      global translated_text
      translated_text = "Error in translate: " + str(response.status_code)
  except Exception as e:
    global translated_text
    translated_text = "Error in translate: " + str(e)

######### Say translated text method using cloud  #########

def say_translated_text():
    api_key = 'AIzaSyBQXF-YzRFaUFfpOAA7bznV0z4ncw1jpn0'
    # Set the URL of the Cloud Text-to-Speech API endpoint
    url = 'https://texttospeech.googleapis.com/v1/text:synthesize?key=' + api_key

    # Set the request data
    global translated_text
    global language_output_ui

    data = {
        'input': {'text': translated_text},
        'voice': {'languageCode': language_output_ui, 'ssmlGender': 'FEMALE'},
        'audioConfig': {'audioEncoding': 'LINEAR16', 'sampleRateHertz': 16000}
    }

    # Set the request headers
    headers = {'Content-Type': 'application/json'}

    try:
        response = urequests.post(url, headers=headers, json=data)
        if response.status_code == 200:
            # Decode the audio content from base64 and save it to a file
            audio_content = base64.b64decode(response.json()['audioContent'])
            with open('/flash/sound2.wav', 'wb') as f:
                f.write(audio_content)
            # Play the audio file
            repeat_button_pressed()
        else:
            global say_translated_text_output
            say_translated_text_output = "Error in translate: " + str(response.status_code)
    except Exception as e:
        global translated_text_output
        translated_text_output = "Error in translate: " + str(e)

######### Assign result to transcribed label method #########

def assign_result_to_transcribed_text():
    global transcribed_text
    transcribed_output.set_text(str(transcribed_text))

######### Assign result to translation label method #########

def assign_result_to_translated_text():
    global translated_text
    translated_output.set_text(str(translated_text))

######### Html_unsecape method to avoid encoding errors because the responses are encoded in html and we need them in plain text #########

def html_unescape(s):
    s = s.replace("&amp;", "&")
    s = s.replace("&lt;", "<")
    s = s.replace("&gt;", ">")
    s = s.replace("&quot;", "\"")
    s = s.replace("&#39;", "'")
    s = re.sub("&#(\d+);", lambda m: chr(int(m.group(1))), s)
    return s




#################### Language Selection ################

def show_language_screen():
  hide_main_screen()
  language_codes = {
      'Arabic Saudi Arabia': 'ar-SA',
      'Czech Czech Republic': 'cs-CZ',
      'Danish Denmark': 'da-DK',
      'German Germany': 'de-DE',
      'English United Kingdom': 'en-GB',
      'Spanish Spain': 'es-ES',
      'Finnish Finland': 'fi-FI',
      'French France': 'fr-FR',
      'Hebrew Israel': 'he-IL',
      'Hindi India': 'hi-IN',
      'Hungarian Hungary': 'hu-HU',
      'Indonesian Indonesia': 'id-ID',
      'Italian Italy': 'it-IT',
      'Japanese Japan': 'ja-JP',
      'Korean Republic of Korea': 'ko-KR',
      'Dutch Belgium': 'nl-BE',
      'Dutch Netherlands': 'nl-NL',
      'Norwegian Norway': 'no-NO',
      'Polish Poland': 'pl-PL',
      'Portuguese Portugal': 'pt-PT',
      'Romanian Romania': 'ro-RO',
      'Russian Russian Federation': 'ru-RU',
      'Slovak Slovakia': 'sk-SK',
      'Swedish Sweden': 'sv-SE',
      'Thai Thailand': 'th-TH',
      'Turkish Turkey': 'tr-TR',
      'Chinese China': 'zh-CN',
      'Chinese Hong Kong': 'zh-HK',
      'Chinese Taiwan': 'zh-TW'
  }
  
  
  options = list(language_codes.keys())
  options.sort()
  
  input_language_dropdown = M5Dropdown(30, 10, 240, 40)
  input_language_dropdown.set_options(options)
  input_language_dropdown.set_sel_index(0)
  
  output_language_dropdown = M5Dropdown(30, 50, 240, 40)
  output_language_dropdown.set_options(options)
  output_language_dropdown.set_sel_index(0)
  
  set_language_button = M5Btn(text='Save', x=110, y=163, w=70, h=30, bg_c=0xFFFFFF, text_c=0x000000, font=FONT_MONT_14, parent=None)
  
  
  
  def set_language_button_pressed():
      selected_input_index = input_language_dropdown.get_sel_index()
      selected_input_language_name = options[selected_input_index]
      selected_input_language_code = language_codes[selected_input_language_name]
      global language_in
      language_input_ui = selected_input_language_code
  
      selected_output_index = output_language_dropdown.get_sel_index()
      selected_output_language_name = options[selected_output_index]
      selected_output_language_code = language_codes[selected_output_language_name]
      language_output_ui = selected_output_language_code
      
      input_language_dropdown.set_hidden(True)
      output_language_dropdown.set_hidden(True)
      set_language_button.set_hidden(True) 
      
      show_main_screen()
  
  set_language_button.pressed(set_language_button_pressed)

