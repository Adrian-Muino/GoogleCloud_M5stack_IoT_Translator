######### Imports #########

from m5stack import *
from m5stack_ui import *
from uiflow import *
from m5stack import mic
import urequests
import base64
import re
import wifiCfg
import time
import machine
import uos

################################################ WIFI settings ################################################

# Configure and connect to Wi-Fi network

#wifiCfg.doConnect('SSID', 'PSW')  # UPDATE SSID & PSW with your Wi-Fi credentials
#while not (wifiCfg.wlan_sta.isconnected()):
#  wait(1)
#  print('Waiting connect')
#print('Connected')

################################################ INIT  ################################################ 


######### Init Default Screen #########

# Screen default
screen = M5Screen()
screen.clean_screen()

# Set background color
screen.set_screen_bg_color(0x0b0c14) 

# Set lateral light color
rgb.setColorAll(0x33ff33) 

######### Init Buttons #########

# Starting / Menu screen components
start_button = M5Btn(text='START', x=90, y=199, w=140, h=30, bg_c=0x03a9f4, text_c=0xffffff, font=FONT_MONT_18, parent=None)

# Translate / Main screen components
language_button = M5Btn(text='CHOOSE LANGUAGE', x=25, y=61, w=270, h=44, bg_c=0x1d54bd, text_c=0xffffff, font=FONT_MONT_18, parent=None)
record_button = M5Btn(text='RECORD', x=25, y=126, w=96, h=98, bg_c=0x9b0000, text_c=0xffffff, font=FONT_MONT_18, parent=None)
repeat_button = M5Btn(text='REPEAT', x=146, y=126, w=149, h=39, bg_c=0x626262, text_c=0xffffff, font=FONT_MONT_18, parent=None)
translate_button = M5Btn(text='TRANSLATE', x=146, y=185, w=149, h=39, bg_c=0x03a9f4, text_c=0xffffff, font=FONT_MONT_18, parent=None)

# Settings screen components
save_button = M5Btn(text='SAVE', x=111, y=196, w=97, h=29, bg_c=0x03a9f4, text_c=0xffffff, font=FONT_MONT_18, parent=None)

######### Init Images #########

# Starting / Menu screen components
menu_image = M5Img("res/Menu_285x195px.png", x=17, y=0, parent=None)

# Translate / Main screen components & Recording screen components
logo_image = M5Img("res/Logo_34x34pxpng.png", x=25, y=16, parent=None)
recording_image = M5Img("res/Recording_151x151px.png", x=86, y=56, parent=None)

# Settings screen components
settings_logo_image = M5Img("res/Logo_34x34pxpng.png", x=30, y=16, parent=None)

######### Init Labels #########

# Translate / Main screen components
logo_text = M5Label('uTranslate', x=71, y=26, color=0xffffff, font=FONT_MONT_14, parent=None)

# Recording screen components
recording_text = M5Label('Recording ...', x=76, y=26, color=0xffffff, font=FONT_MONT_14, parent=None)

# Settings screen components
choose_language_text = M5Label('Choose the languages', x=76, y=26, color=0xffffff, font=FONT_MONT_14, parent=None)

# DEBUG Main Screen
transcribed_output = M5Label('transcribed_output', x=5, y=20, color=0xffffff, font=FONT_MONT_10, parent=None)
translated_output = M5Label('translated_text', x=5, y=40, color=0xffffff, font=FONT_MONT_10, parent=None)


################################################ Global  ################################################ 

# Variables
transcribed_text = None
translated_text = None

language_input_ui = 'en'
language_output_ui = 'fr'

# For debug
transcribed_output_var = ""
translated_output_var = ""
say_translated_text_output_var = ""


################################################ Interfaces ################################################

######### Starting / Menu Screen Interface ######### 

def show_menu_screen():

    # Set up the main screen components
    rgb.setColorAll(0x33ff33)

    # Show interface components
    start_button.set_hidden(False)
    menu_image.set_hidden(False)
    
def hide_menu_screen():

     # Set up the main screen components
    start_button.set_hidden(True)
    menu_image.set_hidden(True)

######### Main Screen Interface ######### 

def show_main_screen():

    # Default screen default
    rgb.setColorAll(0x33ff33)

    # Show interface components
    logo_image.set_hidden(False) 
    logo_text.set_hidden(False)
    language_button.set_hidden(False)
    record_button.set_hidden(False)
    repeat_button.set_hidden(False)
    translate_button.set_hidden(False)

    # Un-comment when debug
    #transcribed_output.set_hidden(False)
    #translated_output.set_hidden(False)

    global transcribed_text, translated_text
    transcribed_output.set_text(str(transcribed_text))
    translated_output.set_text(str(translated_text))

def hide_main_screen():

    # Hide interface components
    logo_text.set_hidden(True) 
    logo_image.set_hidden(True)
    language_button.set_hidden(True)
    record_button.set_hidden(True)
    repeat_button.set_hidden(True)
    translate_button.set_hidden(True)

    transcribed_output.set_hidden(True)
    translated_output.set_hidden(True)

######### Record Screen Interface #########

def show_record_screen():

    # Show interface components
    logo_image.set_hidden(False)
    recording_text.set_hidden(False)
    recording_image.set_hidden(False)

def hide_record_screen():

    # Hide interface components
    logo_image.set_hidden(True)
    recording_text.set_hidden(True)
    recording_image.set_hidden(True)

######### Settings Screen Interface #########

def show_settings_screen():

    #TODO
    # The input and output language dropdown menu : TO IMPLEMENT
    #input_button = M5Btn(text='_', x=30, y=69, w=260, h=38, bg_c=0x03a9f4, text_c=0xffffff, font=FONT_MONT_18, parent=None)
    #output_button = M5Btn(text='_', x=30, y=119, w=260, h=38, bg_c=0x03a9f4, text_c=0xffffff, font=FONT_MONT_18, parent=None

    # Show interface components

    settings_logo_image.set_hidden(False)
    choose_language_text.set_hidden(False)
    save_button.set_hidden(False)

def hide_settings_screen():

    # Hide interface components
    settings_logo_image.set_hidden(True)
    choose_language_text.set_hidden(True)
    save_button.set_hidden(True)

################################################ METHODS ################################################

######### Button methods ######### 

# Start button pressed method

def start_button_pressed():
    hide_menu_screen()
    wait(1)
    show_main_screen()

start_button.pressed(start_button_pressed) 

# Choose language button pressed method

def language_button_pressed():

    show_settings_screen()

language_button.pressed(language_button_pressed)

# Record button pressed method

def record_button_pressed():

    rgb.setColorAll(0x0064b0)
    hide_main_screen()
    show_record_screen()

    # Sets the timer for the record method

    machine.Timer(-1).init(period=1000, mode=machine.Timer.ONE_SHOT, callback=record)


record_button.pressed(record_button_pressed)

# Repeat button pressed method

def repeat_button_pressed():
  
  rgb.setColorAll(0x0064b0)
  speaker.playWAV('/flash/sound2.wav', volume=3) # sound1 is the output speech
  rgb.setColorAll(0x33ff33)

repeat_button.pressed(repeat_button_pressed)

# Translate button pressed method

def translate_button_pressed():
  
  # Transcribe audio
  rgb.setColorAll(0x0064b0)
  transcribe_wav()
  assign_result_to_transcribed_text()

  # Translate text to text
  rgb.setColorAll(0x010d41)
  translate_text()
  assign_result_to_translated_text()

  rgb.setColorAll(0x0064b0)
  say_translated_text()
  rgb.setColorAll(0x33ff33)
  
translate_button.pressed(translate_button_pressed) 

######### Void methods ######### 

# Method to record the voice of the user to be translated

def record(timer):

    # Delete any existing sound file called sound1
    try:
        uos.remove('/flash/sound1.wav')
    except OSError:
        pass    
    
    # Creates a sound file called sound1
    try:
      # Record audio to a file
        mic.record2file(5, '/flash/sound1.wav') # sound1 is the input speech

    except Exception as e:
        print(e)

    finally:
        hide_record_screen()
        show_main_screen()

# Transcribe method using Cloud API Speech to text

def transcribe_wav():

    # Set the API key and language code
    api_key = 'OUR_API_KEY'
    language_code = 'en-US'

    # Set the URL of the Speech-to-Text API endpoint  
    url = 'https://speech.googleapis.com/v1/speech:recognize?key=' + api_key

    # Read the content of the WAV file
    with open('/flash/sound1.wav', 'rb') as f:
        content = f.read()

    # Encode the content as base64

    audio_content = base64.b64encode(content).decode('utf-8')

    # Set the request headers

    headers = {'Content-Type': 'application/json'}

    # Set the request data

    data = {
        'config': {
            'language_code': language_code
        },
        'audio': {
            'content': audio_content
        }
    }

    try:
        response = urequests.post(url, headers=headers, json=data)
        if response.status_code == 200:
          # Extract the transcribed text from the response
            transcription = response.json()['results'][0]['alternatives'][0]['transcript']
            global transcribed_text
            transcribed_text = html_unescape(transcription)
        else:
            global transcribed_text
            transcribed_text = "Error in transcribed method"
    except Exception as e:
        global transcribed_output_var
        transcribed_output_var = str(e)
        
# Translate method using Cloud API

def translate_text():
  api_key = 'OUR_API_KEY'

  url = 'https://translation.googleapis.com/language/translate/v2?key=' + api_key

  # Set the input and output languages

  global language_input_ui
  language_input = language_input_ui
  global language_output_ui
  language_output = language_output_ui

  # Set the request data

  global transcribed_text
  data = {'q': [transcribed_text], 'source': language_input, 'target': language_output}

  # Set the request headers

  headers = {'Content-Type': 'application/json'}

  try:
    response = urequests.post(url, headers=headers, json=data)
    if response.status_code == 200:
       # Extract the translated text from the response
      translation = response.json()['data']['translations'][0]['translatedText']
      global translated_text
      translated_text = html_unescape(translation)
    else:
      global translated_text
      translated_text = "Error in translate: " + str(response.status_code)
  except Exception as e:
    global translated_text
    translated_text = "Error in translate: " + str(e)

# Say translated text method using cloud API

def say_translated_text():
    api_key = 'OUR_API_KEY'
    
    # Set the URL of the Cloud Text-to-Speech API endpoint

    url = 'https://texttospeech.googleapis.com/v1/text:synthesize?key=' + api_key

    # Set the request data

    global translated_text, language_output_ui

    data ={
        'input': {'text': translated_text},
        'voice': {'languageCode': language_output_ui, 'ssmlGender': 'FEMALE'},
        'audioConfig': {'audioEncoding': 'LINEAR16', 'sampleRateHertz': 16000}
    }

    # Set the request headers

    headers = {'Content-Type': 'application/json'}

    try:
        response = urequests.post(url, headers=headers, json=data)
        if response.status_code == 200:

            # Decode the audio content from base64 and save it to a file

            audio_content = base64.b64decode(response.json()['audioContent'])
            with open('/flash/sound2.wav', 'wb') as f:
                f.write(audio_content)

            # Play the audio file

            repeat_button_pressed()
        else:
            global say_translated_text_output_var
            say_translated_text_output_var = "Error in translate: " + str(response.status_code)
    except Exception as e:
        global translated_text_output
        translated_text_output = "Error in translate: " + str(e)

# Assign result to transcribed label method

def assign_result_to_transcribed_text():
    global transcribed_text, transcribed_output_var
    transcribed_output_var = str(transcribed_text)

    # For debug
    transcribed_output.set_text(str(transcribed_text))


# Assign result to translation label method

def assign_result_to_translated_text():
    global translated_text, translated_output_var
    translated_output_var = str(translated_text)

    # For debug
    translated_output.set_text(str(translated_text))

# Html_unsecape method to avoid encoding errors because the responses are encoded in html and we need them in plain text #########

def html_unescape(s):
    s = s.replace("&amp;", "&")
    s = s.replace("&lt;", "<")
    s = s.replace("&gt;", ">")
    s = s.replace("&quot;", "\"")
    s = s.replace("&#39;", "'")
    s = re.sub("&#(\d+);", lambda m: chr(int(m.group(1))), s)
    
    # Handle French accents
    s = s.replace("&agrave;", "à")
    s = s.replace("&Agrave;", "À")
    s = s.replace("&acirc;", "â")
    s = s.replace("&Acirc;", "Â")
    s = s.replace("&eacute;", "é")
    s = s.replace("&Eacute;", "É")
    s = s.replace("&egrave;", "è")
    s = s.replace("&Egrave;", "È")
    s = s.replace("&ecirc;", "ê")
    s = s.replace("&Ecirc;", "Ê")
    s = s.replace("&euml;", "ë")
    s = s.replace("&Euml;", "Ë")
    s = s.replace("&icirc;", "î")
    s = s.replace("&Icirc;", "Î")
    s = s.replace("&ocirc;", "ô")
    s = s.replace("&Ocirc;", "Ô")
    s = s.replace("&ucirc;", "û")
    s = s.replace("&Ucirc;", "Û")
    s = s.replace("&ccedil;", "ç")
    s = s.replace("&Ccedil;", "Ç")
    
    return s


def start_application():
######### Init Display #########
    hide_record_screen()
    hide_main_screen()
    hide_settings_screen()
    show_menu_screen()

start_application()
